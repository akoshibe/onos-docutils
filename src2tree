#!/usr/bin/env bash
# 
# parse a maven project directory tree so it can be examined for source
# structure and be pasted into a wiki with a bit of elbowgrease.
# This script is part of the (unofficial) ONOS documentation toolset.
#
# A wiki-formatted table is written to hier_out.
#
# wiki-indented hierarchy goes into hier_out.
# descriptions and package names go into pdescr_out and pname_out. 
#
# TODO: also allow generation of HTML.

set -o pipefail
IFS=$'\n'

function usage() {
cat << EOF

usage: $0 -i [ONOS_ROOT] [options]

required:
   -i [ONOS_ROOT] : root directory of project to inspect
   
options:
   -l [level]     : how many directory levels to scrape (defualt 3)
   -n [dirname]  : output results to [dirname] (default s2t_out)

Produces wiki-formatted lists for directory structure and project 
POM file hierarchy (project names and description if a POM file is
found). The lists are written as three files in ./s2t_out:

 * hier_out : the directory layout as indented list
 * names : project names as indented list
 * descrs : project descriptions as indented list 

EOF
}

function cleanup() {
  rm /tmp/h_tmp
}
                   
trap cleanup EXIT

# argument parsing 
while getopts ":i:l:n:" opt; do
  case $opt in
    i) treedir=$(printf "${OPTARG}" | sed 's:[/]$::') ;;
    l) level=$OPTARG ;;
    n) dir_out=$(printf "${OPTARG}" | sed 's:[ /]::g') ;;
    \?) usage && exit ;;
  esac
done

# sanity check
if [ -z $treedir ]; then
  printf "%s\n" "must specify a project directory" >&2
  usage >&2
  exit
fi

# set defaults if unset
: ${level:=3}
: ${dir_out:="./s2t_out"}

# setup directory
cwd=$(pwd)
s2t_path="${cwd}/${dir_out}"
mkdir -p ${s2t_path}

# go to right below the project location to get consistency
rdir=$(printf "${treedir}" | sed -e 's:^[./]*::' -e 's:[[:alpha:]-]*/::g')
cd ${treedir}; cd ..
find ${rdir} -maxdepth $((${level} - 1)) -type d -not -path '*/\.*' | grep -v src | grep -v target | sort -d > /tmp/h_tmp

while read l; do
  # project name
  project=$(printf "${l}" | sed 's:[[:alpha:]-]*/::g')
  # indentation
  idt=$(printf "${l}" | sed 's:[[:alpha:]-]*/\{0,1\}:*:g')
  printf "%s %s\n" "${idt}" ${project} >> "${s2t_path}/hier_out"

  if [ -e "${l}/pom.xml" ]; then
    # a project - parse its POM file for project name and descrption
    pkn=$(grep -m2 '<artifactId>' "${l}/pom.xml" | tr $'\n' ' ')
    pkd=$(grep -m2 '</\{0,1\}description>' "${l}/pom.xml" | tr $'\n' ' ')
    printf "%s\n" "${idt}${pkn} ${pkd}" | sed -n 's:\(**\).*<artifactId>\(.*\)</artifactId>.*:\1 \2:g p' >> "${s2t_path}/names"
    printf "%s\n" "${idt}${pkn} ${pkd}" | sed -n 's:\(**\).*<description>\(.*\)</description>.*:\1 \2: p' >> "${s2t_path}/descrs"
  else
    # not a Maven project; fill fields with '-'
    printf "%s\n" "${idt} -" | tee -a "${s2t_path}/names" "${s2t_path}/descrs" 1>/dev/null
  fi    
done < /tmp/h_tmp

cd ${cwd}

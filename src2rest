#!/usr/bin/env bash 
# 
# Scrapes JAX-RS -related methods and values from source and dumps it 
# into a file. 
#
# This script is part of the (unofficial) ONOS documentation toolset. 
#

PARAMS=( '\@PathParam' '\@QueryParam' '\@DefaultValue' )
set -o pipefail
IFS=$'\n'

function usage() {
cat << EOF

usage: $0 [ONOS_ROOT]

required:
    -i [ONOS_ROOT]    : project source directory

Scrapes JAX-RS -related methods and values from source and dumps it
into a file called s2r_out. This file contains:

  calltype: POST, GET, or DELETE
  path_root: root URI for a class of calls
  path: a URI
  method: the Java method defining actions for a URI, which may have 
          Query, path, or default parameters (shown if any exist)

for REST-related methods, per file known to import javax.* packages.

These outputs are not formatted, and are intended to be references.

EOF
}

# Filters REST paths, call types, defaults, implementation methods
function parserest() {

  # for each delimited block, build paths, method and list of params
  printf "\nFILE: %s\n" "$1"

  cat $1 | grep '@.*Path\|@.*PathParam\|@.*QueryParam\|@.*DefaultValue\|@.*POST\|@.*DELETE\|@.*GET\|public.*(' | tr "()" "  " | while read l; do
    case $l in
      *'@POST'*|*'@DELETE'*|*'@GET'*|*'@PUT'*)
        # call types
        printf "calltype: %s\n" "$l"
      ;; 
      '    @Path'*|'    @javax.ws.rs.Path'*)
        # subsequent paths
        spath=$(printf "$l" | sed 's:.*\"\/*\(.*\)\".*:\1:g')
        printf "path: %s\n" "${root}/${spath}"
      ;;
      '@Path'*|'@javax.ws.rs.Path'*)
        # path root
        root=$(printf "$l" | sed 's:.*\"\(.*\)\".*:\1:g')
        printf "path_root: %s\n" "$root"
      ;;
      *'Param'*)
        # Path/QueryParam
        mname=$(printf "$l" | awk '{print $3}')
        [ "$mname" != "String" ] && echo "method:" $mname
        methods=( $(printf "$l" | tr " " '\n') )
        for i in ${!methods[@]} ; do
          param=$(echo "${PARAMS[@]}" | grep "${methods[${i}]}")
          [ "$param" ] && printf "%s %s\n" "${methods[${i}]}" "${methods[$(($i + 1))]}"
        done
      ;;
      *)
        # Public methods, which may or may not be associated with REST calls.
        printf "method: %s\n" "$l" | sed 's:{::'
    esac
  done 
}

if [ "$1" = "-h" ] || [ -z "$1" ]; then 
  usage >&2 && exit
fi

S2R_SRC="${1}/web/"
S2R_OUT="s2r_out"

# extract REST bits from source
grep --exclude '*.html' -r 'import javax' ${S2R_SRC} | awk '{split($0,a,":"); print a[1]}' | uniq | while read l; do
  parserest $l >> $S2R_OUT
done

